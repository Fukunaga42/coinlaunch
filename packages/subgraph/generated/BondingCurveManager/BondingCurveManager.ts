// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ClaimedFee extends ethereum.Event {
  get params(): ClaimedFee__Params {
    return new ClaimedFee__Params(this);
  }
}

export class ClaimedFee__Params {
  _event: ClaimedFee;

  constructor(event: ClaimedFee) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquiditySwapped extends ethereum.Event {
  get params(): LiquiditySwapped__Params {
    return new LiquiditySwapped__Params(this);
  }
}

export class LiquiditySwapped__Params {
  _event: LiquiditySwapped;

  constructor(event: LiquiditySwapped) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class TokensBought extends ethereum.Event {
  get params(): TokensBought__Params {
    return new TokensBought__Params(this);
  }
}

export class TokensBought__Params {
  _event: TokensBought;

  constructor(event: TokensBought) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokensSold extends ethereum.Event {
  get params(): TokensSold__Params {
    return new TokensSold__Params(this);
  }
}

export class TokensSold__Params {
  _event: TokensSold;

  constructor(event: TokensSold) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BondingCurveManager__tokenInfosResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getTokenAddress(): Address {
    return this.value1;
  }

  getVReserveEth(): BigInt {
    return this.value2;
  }

  getVReserveToken(): BigInt {
    return this.value3;
  }

  getRReserveEth(): BigInt {
    return this.value4;
  }

  getRReserveToken(): BigInt {
    return this.value5;
  }

  getLiquidityMigrated(): boolean {
    return this.value6;
  }
}

export class BondingCurveManager__tokensResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getTokenbalance(): BigInt {
    return this.value1;
  }

  getEthBalance(): BigInt {
    return this.value2;
  }

  getIsListed(): boolean {
    return this.value3;
  }
}

export class BondingCurveManager extends ethereum.SmartContract {
  static bind(address: Address): BondingCurveManager {
    return new BondingCurveManager("BondingCurveManager", address);
  }

  BPS_DENOMINATOR(): BigInt {
    let result = super.call(
      "BPS_DENOMINATOR",
      "BPS_DENOMINATOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BPS_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BPS_DENOMINATOR",
      "BPS_DENOMINATOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GRADUATION_THRESHOLD(): BigInt {
    let result = super.call(
      "GRADUATION_THRESHOLD",
      "GRADUATION_THRESHOLD():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_GRADUATION_THRESHOLD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GRADUATION_THRESHOLD",
      "GRADUATION_THRESHOLD():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  R_TOKEN_RESERVE(): BigInt {
    let result = super.call(
      "R_TOKEN_RESERVE",
      "R_TOKEN_RESERVE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_R_TOKEN_RESERVE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "R_TOKEN_RESERVE",
      "R_TOKEN_RESERVE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TRADE_FEE_BPS(): BigInt {
    let result = super.call("TRADE_FEE_BPS", "TRADE_FEE_BPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TRADE_FEE_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TRADE_FEE_BPS",
      "TRADE_FEE_BPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  V_ETH_RESERVE(): BigInt {
    let result = super.call("V_ETH_RESERVE", "V_ETH_RESERVE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_V_ETH_RESERVE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "V_ETH_RESERVE",
      "V_ETH_RESERVE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  V_TOKEN_RESERVE(): BigInt {
    let result = super.call(
      "V_TOKEN_RESERVE",
      "V_TOKEN_RESERVE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_V_TOKEN_RESERVE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "V_TOKEN_RESERVE",
      "V_TOKEN_RESERVE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateCurvedBuyReturn(tokenAddress: Address, ethAmount: BigInt): BigInt {
    let result = super.call(
      "calculateCurvedBuyReturn",
      "calculateCurvedBuyReturn(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(ethAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCurvedBuyReturn(
    tokenAddress: Address,
    ethAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCurvedBuyReturn",
      "calculateCurvedBuyReturn(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(ethAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCurvedSellReturn(
    tokenAddress: Address,
    tokenAmount: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateCurvedSellReturn",
      "calculateCurvedSellReturn(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCurvedSellReturn(
    tokenAddress: Address,
    tokenAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCurvedSellReturn",
      "calculateCurvedSellReturn(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentTokenPrice(tokenAddress: Address): BigInt {
    let result = super.call(
      "getCurrentTokenPrice",
      "getCurrentTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)],
    );

    return result[0].toBigInt();
  }

  try_getCurrentTokenPrice(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTokenPrice",
      "getCurrentTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketCap(tokenAddress: Address): BigInt {
    let result = super.call("getMarketCap", "getMarketCap(address):(uint256)", [
      ethereum.Value.fromAddress(tokenAddress),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketCap(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMarketCap",
      "getMarketCap(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenEthBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "getTokenEthBalance",
      "getTokenEthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)],
    );

    return result[0].toBigInt();
  }

  try_getTokenEthBalance(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenEthBalance",
      "getTokenEthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenInfos(param0: Address): BondingCurveManager__tokenInfosResult {
    let result = super.call(
      "tokenInfos",
      "tokenInfos(address):(address,address,uint256,uint256,uint256,int256,bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new BondingCurveManager__tokenInfosResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
    );
  }

  try_tokenInfos(
    param0: Address,
  ): ethereum.CallResult<BondingCurveManager__tokenInfosResult> {
    let result = super.tryCall(
      "tokenInfos",
      "tokenInfos(address):(address,address,uint256,uint256,uint256,int256,bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BondingCurveManager__tokenInfosResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
      ),
    );
  }

  tokenList(index: BigInt): Address {
    let result = super.call("tokenList", "tokenList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toAddress();
  }

  try_tokenList(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenList", "tokenList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenListArray(param0: BigInt): Address {
    let result = super.call(
      "tokenListArray",
      "tokenListArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_tokenListArray(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenListArray",
      "tokenListArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokens(tokenAddress: Address): BondingCurveManager__tokensResult {
    let result = super.call(
      "tokens",
      "tokens(address):(address,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(tokenAddress)],
    );

    return new BondingCurveManager__tokensResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
    );
  }

  try_tokens(
    tokenAddress: Address,
  ): ethereum.CallResult<BondingCurveManager__tokensResult> {
    let result = super.tryCall(
      "tokens",
      "tokens(address):(address,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(tokenAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BondingCurveManager__tokensResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
      ),
    );
  }

  totalFee(): BigInt {
    let result = super.call("totalFee", "totalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFee", "totalFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapRouter(): Address {
    let result = super.call("uniswapRouter", "uniswapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapRouter",
      "uniswapRouter():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ClaimFeeCall extends ethereum.Call {
  get inputs(): ClaimFeeCall__Inputs {
    return new ClaimFeeCall__Inputs(this);
  }

  get outputs(): ClaimFeeCall__Outputs {
    return new ClaimFeeCall__Outputs(this);
  }
}

export class ClaimFeeCall__Inputs {
  _call: ClaimFeeCall;

  constructor(call: ClaimFeeCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimFeeCall__Outputs {
  _call: ClaimFeeCall;

  constructor(call: ClaimFeeCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }
}

export class SetBancorFormulaCall extends ethereum.Call {
  get inputs(): SetBancorFormulaCall__Inputs {
    return new SetBancorFormulaCall__Inputs(this);
  }

  get outputs(): SetBancorFormulaCall__Outputs {
    return new SetBancorFormulaCall__Outputs(this);
  }
}

export class SetBancorFormulaCall__Inputs {
  _call: SetBancorFormulaCall;

  constructor(call: SetBancorFormulaCall) {
    this._call = call;
  }

  get _bancorFormula(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBancorFormulaCall__Outputs {
  _call: SetBancorFormulaCall;

  constructor(call: SetBancorFormulaCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _newRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetLpFeePercentageCall extends ethereum.Call {
  get inputs(): SetLpFeePercentageCall__Inputs {
    return new SetLpFeePercentageCall__Inputs(this);
  }

  get outputs(): SetLpFeePercentageCall__Outputs {
    return new SetLpFeePercentageCall__Outputs(this);
  }
}

export class SetLpFeePercentageCall__Inputs {
  _call: SetLpFeePercentageCall;

  constructor(call: SetLpFeePercentageCall) {
    this._call = call;
  }

  get _lpFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLpFeePercentageCall__Outputs {
  _call: SetLpFeePercentageCall;

  constructor(call: SetLpFeePercentageCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeeRateCall extends ethereum.Call {
  get inputs(): UpdateFeeRateCall__Inputs {
    return new UpdateFeeRateCall__Inputs(this);
  }

  get outputs(): UpdateFeeRateCall__Outputs {
    return new UpdateFeeRateCall__Outputs(this);
  }
}

export class UpdateFeeRateCall__Inputs {
  _call: UpdateFeeRateCall;

  constructor(call: UpdateFeeRateCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeeRateCall__Outputs {
  _call: UpdateFeeRateCall;

  constructor(call: UpdateFeeRateCall) {
    this._call = call;
  }
}

export class UpdateGraduationThresholdCall extends ethereum.Call {
  get inputs(): UpdateGraduationThresholdCall__Inputs {
    return new UpdateGraduationThresholdCall__Inputs(this);
  }

  get outputs(): UpdateGraduationThresholdCall__Outputs {
    return new UpdateGraduationThresholdCall__Outputs(this);
  }
}

export class UpdateGraduationThresholdCall__Inputs {
  _call: UpdateGraduationThresholdCall;

  constructor(call: UpdateGraduationThresholdCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateGraduationThresholdCall__Outputs {
  _call: UpdateGraduationThresholdCall;

  constructor(call: UpdateGraduationThresholdCall) {
    this._call = call;
  }
}

export class UpdateReservesCall extends ethereum.Call {
  get inputs(): UpdateReservesCall__Inputs {
    return new UpdateReservesCall__Inputs(this);
  }

  get outputs(): UpdateReservesCall__Outputs {
    return new UpdateReservesCall__Outputs(this);
  }
}

export class UpdateReservesCall__Inputs {
  _call: UpdateReservesCall;

  constructor(call: UpdateReservesCall) {
    this._call = call;
  }

  get _vEthReserve(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _vTokenReserve(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rTokenReserve(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateReservesCall__Outputs {
  _call: UpdateReservesCall;

  constructor(call: UpdateReservesCall) {
    this._call = call;
  }
}
